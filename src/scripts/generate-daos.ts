/**
 * Generate DAO classes and a single daos/index.ts that also contains all DAO types.
 *
 * Assumptions:
 * - src/schemas/index.ts exports:
 *   - SchemaRegistry (value): { [ModelName]: ZodSchema }
 *   - SchemaNames (array): ModelName[]
 *   - `export type { ModelName }` for each model type
 *
 * Outputs:
 * - src/daos/<model-kebab>.dao.ts
 * - src/daos/index.ts (aggregate exports + DaoRegistry + all DAO types)
 */

import path from 'node:path'

import { join, kebabCase, map, sortBy } from 'lodash-es'

import { SchemaNames } from '../schemas/index.ts'
import { writeFormattedFileToDir } from '../utils/write-file-to-dir.ts'

const ROOT = process.cwd()
const DAOS_DIR = path.resolve(ROOT, 'src/daos')
const headerBanner = `/* Auto-generated by scripts/generate-daos.ts.
 * Do NOT edit this file manually.
 */`

async function generateDaos() {
  // Ensure deterministic order
  const modelNames = sortBy([...SchemaNames])

  // 1) Emit one DAO file per model
  for (const model of modelNames) {
    const fileBase = kebabCase(model)

    const daoSource = `${headerBanner}
import { BaseDao } from "../lib/base.dao.ts"
import { SchemaRegistry, type SchemaOf } from "../schemas/index.ts"

type ${model} = SchemaOf<'${model}'>

export class ${model}Dao extends BaseDao<${model}> {
  constructor() {
    super(SchemaRegistry.${model})
  }
}
`
    await writeFormattedFileToDir(DAOS_DIR, `${fileBase}.dao.ts`, daoSource)
    console.log(`${model} dao generated`)
  }

  // 2) Build daos/index.ts (aggregate exports + registry + types)
  const importLines = join(
    map(modelNames, (m) => `import { ${m}Dao } from './${kebabCase(m)}.dao.ts'`),
    '\n',
  )

  const registryLines = `export const DaoRegistry = {
${join(
  map(modelNames, (m) => `  ${m}Dao`),
  ',\n',
)}
} as const`

  const indexSource = `${headerBanner}
import { keys } from 'lodash-es'
import type { DaoConstructor } from '../lib/base.dao.ts'
import type { ${join(modelNames, ', ')}, SchemaName, SchemaOf } from '../schemas/index.ts'
${importLines}

${registryLines}
export type DaoRegistry = typeof DaoRegistry
export type DaoName = keyof typeof DaoRegistry
export const DaoNames = keys(DaoRegistry) as DaoName[]
export type DaoEntityMap = {
${join(
  map(modelNames, (m) => `  ${m}Dao: ${m}`),
  ',\n',
)}
}

export type DaoConstructorMap = {
${join(
  map(modelNames, (m) => `  ${m}Dao: DaoConstructor<${m}>`),
  ',\n',
)}
}
// Entity type of a given DAO name (e.g. 'UsersDao' -> Users)
export type EntityOfDao<D extends DaoName> =
  D extends \`\${infer M}Dao\` ? SchemaOf<M & SchemaName> : never
// DAO class type of a given model name (e.g. DaoOf<'Users'> -> typeof UsersDao)
export type DaoOf<M extends SchemaName> = DaoRegistry[\`\${M}Dao\`]
`

  const indexOut = await writeFormattedFileToDir(DAOS_DIR, 'index.ts', indexSource)
  console.log('âœ” wrote', indexOut)
}

generateDaos().catch((err) => {
  console.error('generate-daos failed:', err)
  process.exit(1)
})
